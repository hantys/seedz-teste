require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/products', type: :request do
  before(:all) do
    @user = create(:user)
  end

  let(:valid_attributes) do
    attributes_for(:product)
  end

  let(:invalid_attributes) do
    attributes_for(:product, name: nil, price: nil)
  end

  let(:valid_headers) do
    return { Authorization: JsonWebToken.encode(user_token: @user.token), 'Content-Type': 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      create(:product)
      get api_v1_products_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      product = create(:product)
      get api_v1_product_url(product), headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(response.body).to include_json(
        id: product.id,
        name: product.name,
        stock: product.stock,
        price: product.price
      )
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Product' do
        expect do
          post api_v1_products_url,
               params: { product: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Product, :count).by(1)
      end

      it 'renders a JSON response with the new product' do
        post api_v1_products_url,
             params: { product: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Product' do
        expect do
          post api_v1_products_url,
               params: { product: invalid_attributes }, headers: valid_headers, as: :json
        end.to change(Product, :count).by(0)
      end

      it 'renders a JSON response with errors for the new product' do
        post api_v1_products_url,
             params: { product: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes_for(:product, stock: 5, price: 99.5)
      end

      it 'updates the requested product' do
        product = create(:product)
        patch api_v1_product_url(product),
              params: { product: new_attributes }, headers: valid_headers, as: :json
        product.reload
        expect(product.stock).to eq(5)
        expect(product.price).to eq(99.5)
        expect(response).to have_http_status(:ok)
        expect(response.body).to include_json(
          stock: 5,
          price: 99.5
        )
      end

      it 'renders a JSON response with the product' do
        product = create(:product)
        patch api_v1_product_url(product),
              params: { product: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the product' do
        product = create(:product)
        patch api_v1_product_url(product),
              params: { product: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested product' do
      product = create(:product)
      expect do
        delete api_v1_product_url(product), headers: valid_headers, as: :json
      end.to change(Product, :count).by(-1)
    end
  end
end
